// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package main

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("frontend/dist", "index.html", "\"PCFET0NUWVBFIGh0bWw+PGh0bWw+PGhlYWQ+PG1ldGEgY2hhcnNldD11dGYtOD48bWV0YSBuYW1lPXZpZXdwb3J0IGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTEiPjx0aXRsZT5mcm9udGVuZDwvdGl0bGU+PGxpbmsgaHJlZj0vc3RhdGljL2Nzcy9hcHAuMzA3OTAxMTUzMDBhYjI3NjE0Y2UxNzY4OTk1MjNiNjIuY3NzIHJlbD1zdHlsZXNoZWV0PjwvaGVhZD48Ym9keT48ZGl2IGlkPWFwcD48L2Rpdj48c2NyaXB0IHR5cGU9dGV4dC9qYXZhc2NyaXB0IHNyYz0vc3RhdGljL2pzL21hbmlmZXN0LjJhZTJlNjlhMDVjMzNkZmM2NWY4LmpzPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT10ZXh0L2phdmFzY3JpcHQgc3JjPS9zdGF0aWMvanMvdmVuZG9yLjQ5NjI5ZGI2OTViNjhkOTBhNjNmLmpzPjwvc2NyaXB0PjxzY3JpcHQgdHlwZT10ZXh0L2phdmFzY3JpcHQgc3JjPS9zdGF0aWMvanMvYXBwLmUyYTA4ZDgwMzdjODgzZTZiZTNmLmpzPjwvc2NyaXB0PjwvYm9keT48L2h0bWw+\"")
	packr.PackJSONBytes("frontend/dist", "static/css/app.30790115300ab27614ce176899523b62.css", "\"I2FwcHtmb250LWZhbWlseTpBdmVuaXIsSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7LXdlYmtpdC1mb250LXNtb290aGluZzphbnRpYWxpYXNlZDstbW96LW9zeC1mb250LXNtb290aGluZzpncmF5c2NhbGU7dGV4dC1hbGlnbjpjZW50ZXI7Y29sb3I6IzJjM2U1MDttYXJnaW4tdG9wOjYwcHh9aDFbZGF0YS12LWQ4ZWM0MWJjXSxoMltkYXRhLXYtZDhlYzQxYmNde2ZvbnQtd2VpZ2h0OjQwMH11bFtkYXRhLXYtZDhlYzQxYmNde2xpc3Qtc3R5bGUtdHlwZTpub25lO3BhZGRpbmc6MH1saVtkYXRhLXYtZDhlYzQxYmNde2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbjowIDEwcHh9YVtkYXRhLXYtZDhlYzQxYmNde2NvbG9yOiM0MmI5ODN9Ci8qIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC4zMDc5MDExNTMwMGFiMjc2MTRjZTE3Njg5OTUyM2I2Mi5jc3MubWFwICov\"")
	packr.PackJSONBytes("frontend/dist", "static/css/app.30790115300ab27614ce176899523b62.css.map", "\"eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC4zMDc5MDExNTMwMGFiMjc2MTRjZTE3Njg5OTUyM2I2Mi5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsS0FDRSw2Q0FBbUQsQ0FDbkQsa0NBQW1DLENBQ25DLGlDQUFrQyxDQUNsQyxpQkFBa0IsQ0FDbEIsYUFBYyxDQUNkLGVBQ0YsQ0FFQSx3Q0FDRSxlQUNGLENBQ0Esb0JBQ0Usb0JBQXFCLENBQ3JCLFNBQ0YsQ0FDQSxvQkFDRSxvQkFBcUIsQ0FDckIsYUFDRixDQUNBLG1CQUNFLGFBQ0YiLCJmaWxlIjoiYXBwLjMwNzkwMTE1MzAwYWIyNzYxNGNlMTc2ODk5NTIzYjYyLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIlxuI2FwcCB7XG4gIGZvbnQtZmFtaWx5OiAnQXZlbmlyJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgY29sb3I6ICMyYzNlNTA7XG4gIG1hcmdpbi10b3A6IDYwcHg7XG59XG5cbmgxW2RhdGEtdi1kOGVjNDFiY10sIGgyW2RhdGEtdi1kOGVjNDFiY10ge1xuICBmb250LXdlaWdodDogbm9ybWFsO1xufVxudWxbZGF0YS12LWQ4ZWM0MWJjXSB7XG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgcGFkZGluZzogMDtcbn1cbmxpW2RhdGEtdi1kOGVjNDFiY10ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbjogMCAxMHB4O1xufVxuYVtkYXRhLXYtZDhlYzQxYmNdIHtcbiAgY29sb3I6ICM0MmI5ODM7XG59XG4iXX0=\"")
	packr.PackJSONBytes("frontend/dist", "static/js/app.e2a08d8037c883e6be3f.js", "\"\"")
	packr.PackJSONBytes("frontend/dist", "static/js/app.e2a08d8037c883e6be3f.js.map", "\"\"")
	packr.PackJSONBytes("frontend/dist", "static/js/manifest.2ae2e69a05c33dfc65f8.js", "\"IWZ1bmN0aW9uKHIpe3ZhciBuPXdpbmRvdy53ZWJwYWNrSnNvbnA7d2luZG93LndlYnBhY2tKc29ucD1mdW5jdGlvbihlLHUsYyl7Zm9yKHZhciBmLGkscCxhPTAsbD1bXTthPGUubGVuZ3RoO2ErKylpPWVbYV0sb1tpXSYmbC5wdXNoKG9baV1bMF0pLG9baV09MDtmb3IoZiBpbiB1KU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh1LGYpJiYocltmXT11W2ZdKTtmb3IobiYmbihlLHUsYyk7bC5sZW5ndGg7KWwuc2hpZnQoKSgpO2lmKGMpZm9yKGE9MDthPGMubGVuZ3RoO2ErKylwPXQodC5zPWNbYV0pO3JldHVybiBwfTt2YXIgZT17fSxvPXsyOjB9O2Z1bmN0aW9uIHQobil7aWYoZVtuXSlyZXR1cm4gZVtuXS5leHBvcnRzO3ZhciBvPWVbbl09e2k6bixsOiExLGV4cG9ydHM6e319O3JldHVybiByW25dLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHQpLG8ubD0hMCxvLmV4cG9ydHN9dC5tPXIsdC5jPWUsdC5kPWZ1bmN0aW9uKHIsbixlKXt0Lm8ocixuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsbix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OmV9KX0sdC5uPWZ1bmN0aW9uKHIpe3ZhciBuPXImJnIuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiByLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9O3JldHVybiB0LmQobiwiYSIsbiksbn0sdC5vPWZ1bmN0aW9uKHIsbil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyLG4pfSx0LnA9Ii8iLHQub2U9ZnVuY3Rpb24ocil7dGhyb3cgY29uc29sZS5lcnJvcihyKSxyfX0oW10pOwovLyMgc291cmNlTWFwcGluZ1VSTD1tYW5pZmVzdC4yYWUyZTY5YTA1YzMzZGZjNjVmOC5qcy5tYXA=\"")
	packr.PackJSONBytes("frontend/dist", "static/js/manifest.2ae2e69a05c33dfc65f8.js.map", "\"eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNmI5MThkOTY5MWVmMmJkZTVjNDgiXSwibmFtZXMiOlsicGFyZW50SnNvbnBGdW5jdGlvbiIsIndpbmRvdyIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsInJlc3VsdCIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJtb2R1bGVzIiwic2hpZnQiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicyIsImluc3RhbGxlZE1vZHVsZXMiLCIyIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwIiwib2UiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUFDLE9BQUEsYUFDQUEsT0FBQSxzQkFBQUMsRUFBQUMsRUFBQUMsR0FJQSxJQURBLElBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUEsRUFBQUMsS0FDUUQsRUFBQU4sRUFBQVEsT0FBb0JGLElBQzVCRixFQUFBSixFQUFBTSxHQUNBRyxFQUFBTCxJQUNBRyxFQUFBRyxLQUFBRCxFQUFBTCxHQUFBLElBRUFLLEVBQUFMLEdBQUEsRUFFQSxJQUFBRCxLQUFBRixFQUNBVSxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBYixFQUFBRSxLQUNBWSxFQUFBWixHQUFBRixFQUFBRSxJQUlBLElBREFMLEtBQUFFLEVBQUFDLEVBQUFDLEdBQ0FLLEVBQUFDLFFBQ0FELEVBQUFTLE9BQUFULEdBRUEsR0FBQUwsRUFDQSxJQUFBSSxFQUFBLEVBQVlBLEVBQUFKLEVBQUFNLE9BQTJCRixJQUN2Q0QsRUFBQVksSUFBQUMsRUFBQWhCLEVBQUFJLElBR0EsT0FBQUQsR0FJQSxJQUFBYyxLQUdBVixHQUNBVyxFQUFBLEdBSUEsU0FBQUgsRUFBQWQsR0FHQSxHQUFBZ0IsRUFBQWhCLEdBQ0EsT0FBQWdCLEVBQUFoQixHQUFBa0IsUUFHQSxJQUFBQyxFQUFBSCxFQUFBaEIsSUFDQUcsRUFBQUgsRUFDQW9CLEdBQUEsRUFDQUYsWUFVQSxPQU5BTixFQUFBWixHQUFBVyxLQUFBUSxFQUFBRCxRQUFBQyxJQUFBRCxRQUFBSixHQUdBSyxFQUFBQyxHQUFBLEVBR0FELEVBQUFELFFBS0FKLEVBQUFPLEVBQUFULEVBR0FFLEVBQUFRLEVBQUFOLEVBR0FGLEVBQUFTLEVBQUEsU0FBQUwsRUFBQU0sRUFBQUMsR0FDQVgsRUFBQVksRUFBQVIsRUFBQU0sSUFDQWhCLE9BQUFtQixlQUFBVCxFQUFBTSxHQUNBSSxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQUwsS0FNQVgsRUFBQWlCLEVBQUEsU0FBQVosR0FDQSxJQUFBTSxFQUFBTixLQUFBYSxXQUNBLFdBQTJCLE9BQUFiLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUwsRUFBQVMsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWCxFQUFBWSxFQUFBLFNBQUFPLEVBQUFDLEdBQXNELE9BQUExQixPQUFBQyxVQUFBQyxlQUFBQyxLQUFBc0IsRUFBQUMsSUFHdERwQixFQUFBcUIsRUFBQSxJQUdBckIsRUFBQXNCLEdBQUEsU0FBQUMsR0FBOEQsTUFBcEJDLFFBQUFDLE1BQUFGLEdBQW9CQSIsImZpbGUiOiJzdGF0aWMvanMvbWFuaWZlc3QuMmFlMmU2OWEwNWMzM2RmYzY1ZjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gd2luZG93W1wid2VicGFja0pzb25wXCJdO1xuIFx0d2luZG93W1wid2VicGFja0pzb25wXCJdID0gZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBleGVjdXRlTW9kdWxlcykge1xuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW10sIHJlc3VsdDtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGNodW5rSWRzLCBtb3JlTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMpO1xuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cbiBcdFx0aWYoZXhlY3V0ZU1vZHVsZXMpIHtcbiBcdFx0XHRmb3IoaT0wOyBpIDwgZXhlY3V0ZU1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdHJlc3VsdCA9IF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gZXhlY3V0ZU1vZHVsZXNbaV0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fTtcblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0cyB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4gXHR2YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuIFx0XHQyOiAwXG4gXHR9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cbiBcdC8vIG9uIGVycm9yIGZ1bmN0aW9uIGZvciBhc3luYyBsb2FkaW5nXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm9lID0gZnVuY3Rpb24oZXJyKSB7IGNvbnNvbGUuZXJyb3IoZXJyKTsgdGhyb3cgZXJyOyB9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDZiOTE4ZDk2OTFlZjJiZGU1YzQ4Il0sInNvdXJjZVJvb3QiOiIifQ==\"")
	packr.PackJSONBytes("frontend/dist", "static/js/vendor.49629db695b68d90a63f.js", "\"\"")
	packr.PackJSONBytes("frontend/dist", "static/js/vendor.49629db695b68d90a63f.js.map", "\"\"")
	packr.PackJSONBytes("frontend/static", ".gitkeep", "\"\"")
}
